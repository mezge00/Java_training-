public class dBay {

public static void quicksort(dataOfOrder(in time),int firstOrder,int lastOrder) {
				if(lastOrder<=firstOrder)// Check the first order is still higher priority if not return 
					return;
				int pivot=partion(array,firstOrder,lastOrder);       // Find the place for pivot 
				quicksort(array,firstOrder,pivot-1);  // Recursively call the quicksort until all are sorted below the first pivot
				quicksort(array,pivot+1,lastOrder);   // Recursively call the quicksort until all are sorted above the first pivot

				
				
			}
			private static int partion(dataOfOrder(in time), int firstOrder, int lastOrder) {
				int pivot=array[lastOrder];   // start the pivot to be at the end 
				int i=firstOrder-1;                // Initialize two variables(i,j) to compare the time with the pivoting time 
				for(int j=firstOrder;j<=lastOrder-1;j++) {
					if(array[j]<pivot) {        //if  if we got any time which is early from the pivot we need to swap the two variables
						i++;
						int temp=array[i];
						array[i]=array[j];
						array[j]=temp;
					}
						
						
					
				}
				i++;           // After we arrived the last iteration for j then we already found the place for pivot so that we can swap them
				int temp=array[i];
				array[i]=array[lastOrder];
				array[lastOrder]=temp;
				return i;
			}
}
                              at 1hr     2hr    3hr     4hr    5hr  ..........24hr


The total price=      | order1,1    order1,2  ............order1,24  |     price1
                                  | order2,1     order 2,2.............order2,24|     price2
                                  |   .               .      .......................    .             |     price3
                                  |  .               .      ........................   .              \*       .
                                  |  .               .     ........................    .               \        .
                                  |  .               .      ........................   .                |       .
                                  |  ordern,1. . . . . . . . . . . . . .     order n,24  |    price24
                                  
                                  
                                  
public class Binarysearch {

public static int binarySearch(E data(in time, int particularOrder) {
		int early=0;    //  The one who orderd early so that it helps us to find the middle           
		int late=A.length-1; //  The last value on the timely sorted data 
		while(early<=late) {        // The loop which runs untill  the particular value is found 
			int middle=(A[late]+A[early])/2;          // Formula to find middle or the recursive part
			if(A[middle]<particularOrder)          
				early=middle+1;
			else if(A[middle]>particularOrder)
				late=middle-1;
			else
				return middle;
					
			
			
		}
		return -1;  // If the order is not found we need to return -1 or any custom defined 
		
	}

}

